/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sabri.practicaExamen.felicitacion;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author macarena
 */
public class GUIFelicitacion extends javax.swing.JFrame {

    private BufferedReader reader;	        //objetos para leer del archivo de texto que contiene el texto de la carta

    private InputStream inputStream;	//objetos para leer del archivo binario 
    private DataInputStream datosD;	//que contiene el nombre y direccion de los empleados

    private BufferedWriter writer;		//objetos para generar los archivos de texto con la felicitacion para cada empleado

    private File fileCarta;
    private File fileDatos;
    private File carpetaDestino;

    public GUIFelicitacion() {
        initComponents();
        this.setTitle("Generador de cartas");
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        cajaFichTexto = new javax.swing.JTextField();
        cajaFichDatos = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        botonGenerar = new javax.swing.JButton();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ficheros - Ejercicio4");

        cajaFichTexto.setToolTipText("Introduce ruta o haz doble clic.");
        cajaFichTexto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cajaFichTextoMouseClicked(evt);
            }
        });

        cajaFichDatos.setToolTipText("Introduce ruta o haz doble clic.");
        cajaFichDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cajaFichDatosMouseClicked(evt);
            }
        });

        jLabel1.setText("Fichero texto:");

        jLabel2.setText("Fichero datos:");

        botonGenerar.setMnemonic('G');
        botonGenerar.setText("Genear cartas ");
        botonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGenerarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonGenerar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cajaFichTexto)
                            .addComponent(cajaFichDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cajaFichTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cajaFichDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(botonGenerar)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String fecha() {
        DateTimeFormatter dtf = DateTimeFormatter.ISO_LOCAL_DATE;
        return "Valladolid, " + dtf.format(LocalDate.now());
    }

    private void botonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGenerarActionPerformed

        carpetaDestino = seleccionarCarpeta();
        if (carpetaDestino == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar la carpeta destino de las cartas", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (fileCarta == null || fileDatos == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar los ficheros", "Aviso", JOptionPane.WARNING_MESSAGE);
            return;

        }

        boolean EOF = false; //controla el fin del archivo binario                                
        try {
            reader = Files.newBufferedReader(Paths.get(fileCarta.toURI()));  //abrimos la carta para lectura
            String texto = extraerTexto();

            inputStream = Files.newInputStream(Paths.get(fileDatos.toURI()));	//abrimos el archivo con los datos para lectura
            datosD = new DataInputStream(inputStream);

            String archFelicitacion;  //almacena nombre del archivo de felicitacion de cada empleado
            int cont = 0;	//contador del numero de empleados almacenados en el archivo binario

            String empleado = "";
            String direccion = "";
            while (!EOF) {  //mientras haya empleados que leer en el archivo binario
                cont++;
                empleado = datosD.readUTF();
                direccion = datosD.readUTF();

                //genero automaticamente 
                //la ruta al archivo con la felicitaci√≥n persoalizada                
                archFelicitacion = "carta" + cont + ".txt";
                writer = Files.newBufferedWriter(Paths.get(carpetaDestino.getPath() + File.separator + archFelicitacion));  //creo el archivo para escritura

                //Genero el texto de la carta
                writer.write(empleado);
                writer.newLine();
                writer.newLine();
                writer.write(direccion + "\t\t" + fecha());
                writer.newLine();
                writer.newLine();
                writer.write(texto);

                writer.close();  //cierro el archivo generado                
            }

        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Fichero no encontrado");
        } catch (EOFException e) {
            EOF = true;
            JOptionPane.showMessageDialog(this, "Cartas generadas");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error de E/S");
        } finally {
            //cierro los flujos
            try {
                if (reader != null) {
                    reader.close();
                }
                if (datosD != null) {
                    datosD.close();
                }
            } catch (IOException e) {
                System.out.println("Error de E/S");
            }

        }


    }//GEN-LAST:event_botonGenerarActionPerformed

    private void cajaFichTextoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cajaFichTextoMouseClicked
        if (evt.getClickCount() == 2) {
            fileCarta = seleccionarFichero("Selecciona la carta", "Archivos de texto", "txt");
            if (fileCarta != null) {
                this.cajaFichTexto.setText(fileCarta.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_cajaFichTextoMouseClicked

    private void cajaFichDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cajaFichDatosMouseClicked
        if (evt.getClickCount() == 2) {
            fileDatos = seleccionarFichero("Selecciona los datos", "Archivos binarios", "dat");
            if (fileDatos != null) {
                this.cajaFichDatos.setText(fileDatos.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_cajaFichDatosMouseClicked

    private File seleccionarFichero(String title, String filterText, String filter) {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle(title);
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(filterText, filter);
        jfc.addChoosableFileFilter(filtro);
        jfc.setAcceptAllFileFilterUsed(false); //permite elegir entre las 2 opciones (all|filtro)

        int resp = jfc.showOpenDialog(null);

        if (resp == JFileChooser.APPROVE_OPTION) {
            return jfc.getSelectedFile();
        }
        return null;
    }

    private File seleccionarCarpeta() {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Carpeta destino");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int resp = jfc.showSaveDialog(null);

        if (resp == JFileChooser.APPROVE_OPTION) {
            return jfc.getSelectedFile();
        }
        return null;
    }

    //Metodo que lee el texto de la carta de felicitacion
    //y lo devuelve integrado en una unica cadena de texto
    private String extraerTexto() throws IOException {
        List<String> todo = Files.readAllLines(Paths.get(fileCarta.getPath()),
                StandardCharsets.ISO_8859_1);
        String texto = "";

        for (String linea : todo) {
            texto += linea + "\n";
        }
        return texto;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIFelicitacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIFelicitacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIFelicitacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIFelicitacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIFelicitacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonGenerar;
    private javax.swing.JTextField cajaFichDatos;
    private javax.swing.JTextField cajaFichTexto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
